/* this part is learning and experimenting part */

@import url('https://unpkg.com/normalize.css@8.0.1/normalize.css') layer(normalize);

@layer normalize, base, demo;

@layer base {
  @import url('https://unpkg.com/@fontsource/inter/index.css') layer(fonts);
  @import url('https://unpkg.com/@fontsource/roboto/index.css') layer(fonts);
  @import url('https://unpkg.com/@fontsource/roboto-slab/index.css') layer(fonts);
  @import url('https://unpkg.com/@fontsource/space-mono/index.css') layer(fonts);
}
@layer demo {
    body {
        background: orange-dark(#000);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        gap: 1rem;
        padding-block: 2rem;
        background-color: #f0f0f0;
    }
    .say-hello {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        font-size: 2rem;
        font-family: 'Inter', sans-serif;
        color: #333;
    }
    h1,
    p {
        margin: 0;
    }
    h1.fluid {
        --font-size-min: 22;
        --font-level: 4;
    }
    h3 {
        white-space: nowrap;
        margin: 0;
    }
    body > p {
        width: 74ch;
        max-width: calc(100% - 5rem);
        text-wrap: balance;
        font-family: monospace;
        margin-bottom: 4rem;
        line-height: 1.5;
        opacity: 0.8;
        font-weight: 400;

        @media (max-width: 768px) {
            text-align: center;
        }
    }
    li :is(svg, h3) {
        opacity: 0.8;
        transition: opacity calc(var(--speed) * 1ms) var(--easing);
    }
    li img {
        filter: grayscale(1) brightness(2.5);
        scale: 0.8;
        transition-property: filter, scale;
        transition: filter calc(var(--speed) * 1ms) var(--easing),
            scale calc(var(--speed) * 1ms) var(--easing);
            transition-timing-function: var(--easing);
    }

    [data-active='true'] :is(a, p, h3, svg) {
        opacity: var(--opacity, 1);
    }
    [data-active='false'] :is(a, p) {
        transition-delay: calc(var(--speed) * 0.20ms);
    }

    [data-active='true'] img {
        filter: grayscale(0) brightness(1);
        scale: 1;
        transition-delay: calc(var(--speed) * 0.20ms);
    }

    [data-animate] {
        opacity: 0;
        transform: translateY(1rem);
        transition: opacity calc(var(--speed) * 1ms) var(--easing),
            transform calc(var(--speed) * 1ms) var(--easing);
    }
}